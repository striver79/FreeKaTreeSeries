// LC link : https://leetcode.com/problems/binary-tree-postorder-traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

public:
    void traversal(node *root)
    {
        if (!root)
            return;

        vector<int> PreOrder, InOrder, PostOrder;

        stack<pair<node *, int>> S;

        S.push({root, 1});

        while (!S.empty())
        {
            if (S.top().second == 1)
            {
                PreOrder.push_back(S.top().first->data);
                S.top().second++;

                if (S.top().first->left)
                    S.push({S.top().first->left, 1});
            }

            else if (S.top().second == 2)
            {
                InOrder.push_back(S.top().first->data);
                S.top().second++;

                if (S.top().first->right)
                    S.push({S.top().first->right, 1});
            }

            else
            {
                PostOrder.push_back(S.top().first->data);
                S.pop();
            }
        }

        cout << "Pre Order : ";

        for (int it : PreOrder)
            cout << it << " ";

        cout << "\n";

        cout << "In Order : ";

        for (int it : InOrder)
            cout << it << " ";

        cout << "\n";

        cout << "Post Order : ";

        for (int it : PostOrder)
            cout << it << " ";
    }
};




